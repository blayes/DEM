80 * 4
80 * 5
cvs <- rep(1:10, each = 4)
fixs <- rep(rep(1:2, 2), times = 10)
rans <- rep(rep(1:2, each = 2), times = 10)
tmp <- cbind(cv = cvs, fix = fixs, ran = rans)
wid <- cbind(rbind(tmp, tmp), nn = rep(1:2, each = 40))

wid
10^4/30
10^4/40
## See mbest package at http://ptrckprry.com/code/ Perry (2017) in JRSS-B.
genData <- function (ngroup, nobs, nfixef, nranef) {
    library(matrixStats)
    library(Matrix)

    ## fixed effects coefficients
    fixef <- rep(c(-2, 2), length = nfixef)
    if (nranef == 3) {
        ranefCorr <- matrix(c(1, -0.4, 0.3,
                              -0.4, 1, 0.001,
                              0.3, 0.001, 1),
                            nranef, nranef)
    } else {
        ranefCorr <- as.matrix(bdiag(rep(list(matrix(c(1, -0.4, 0.3,
                                                       -0.4, 1, 0.001,
                                                       0.3, 0.001, 1),
                                                     3, 3)), 2)))
    }
    ranefCov <- outer(sqrt(1:nranef), sqrt(1:nranef)) * ranefCorr
    ranefCovSqrt <- chol(ranefCov)

                                        # generate coefficients
    u <- matrix(rnorm(ngroup * nranef), ngroup, nranef)
    ranef <- u %*% ranefCovSqrt

    ## generate group
    suppressWarnings({ # ignore warning about using Walker's alias method
        group <- sample.int(ngroup, nobs, replace=TRUE)
    })

    ## generate feature  matrices with Pr(x[i,j] = +1) = P(x[i,j] = -1) = 1/2,
    x <- matrix(sample(c(-1, +1), nobs * nfixef, replace=TRUE), nobs, nfixef)
    z <- matrix(sample(c(-1, +1), nobs * nranef, replace=TRUE), nobs, nranef)

    ## compute linear predictors and generate observations
    mu <- drop(x %*% fixef) + rowSums(z * ranef[group, ])
    y <- rnorm(nobs, mean=mu, sd=1)

    list(ngroup = ngroup, nobs = nobs,
         fixef = fixef,
         ranefCov = ranefCov,
         ranefCovSqrt = ranefCovSqrt,
         group = group, x = x, z = z, y = y)
}

    repData <- genData(100, 10000, 10, 3)
    repData <- genData(100, 10000, 10, 6)
head(well)
wellNoNa
head(wellNoNa)
head(wellNoNa)
dim(wellNoNa)
head(wllNoNa)
head(wellNoNa)
eqn1 <- tsls(Injury ~ 1,
             instruments = ~ Stress + Sleep.Quality +  Sleep.Duration +  School.Stress +  Nutrition + Fatigue,
             data = wellNoNa)
summary(eqn1)
eqn1 <- tsls(Injury ~ 1,
             instruments = ~ Stress + Sleep.Quality +  Sleep.Duration +  School.Stress +  Nutrition + Fatigue,
             data = wellNoNa, family = "binomial")
summary(eqn1)
predict(eqn1, wellNoNa)
head(wellNoNa)
wellNoNa[wellNoNa$ID == 1, ]
head(wellNoNa[wellNoNa$ID == 1, ])
head(wellNoNa[wellNoNa$ID == 1, -(1:2)])
head(wellNoNa[wellNoNa$ID == 1, -(1:3)])
svd(wellNoNa[wellNoNa$ID == 1, -(1:3)])
tmp <- svd(wellNoNa[wellNoNa$ID == 1, -(1:3)])
tmp$u
head(tmp$u)
head(tmp$d)
dim(tmp$u)
length(tmp$d)
dim(tmp$v)
1e6/5e5
1e6/1e5
1e4
1e6/5e4
1e6/1e4
